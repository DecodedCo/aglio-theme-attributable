// Generated by CoffeeScript 1.10.0
(function() {
  var inherit, renderAttributes;

  inherit = require('./inherit');

  module.exports = renderAttributes = function(root, dataStructures) {
    var collection, i, j, len, member, obj, object, properties, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref19, ref2, ref20, ref21, ref22, ref23, ref24, ref25, ref26, ref27, ref28, ref29, ref3, ref30, ref31, ref32, ref33, ref34, ref35, ref36, ref4, ref5, ref6, ref7, ref8, ref9, value;
    object = {};
    if (root.element === 'object') {
      collection = [];
      properties = root.content.slice(0);
      i = 0;
      while (i < properties.length) {
        obj = {};
        member = properties[i];
        i++;
        if (member.element === 'ref') {
          ref = dataStructures[member.content.href];
          i--;
          properties.splice.apply(properties, [i, 1].concat(ref.content));
          continue;
        } else {
          obj.name = member != null ? (ref1 = member.content) != null ? (ref2 = ref1.key) != null ? ref2.content : void 0 : void 0 : void 0;
          obj.type = member != null ? (ref3 = member.content) != null ? (ref4 = ref3.value) != null ? ref4.element : void 0 : void 0 : void 0;
          obj.description = member != null ? (ref5 = member.meta) != null ? ref5.description : void 0 : void 0;
          obj.values = [];
          if (member != null ? (ref6 = member.attributes) != null ? ref6.typeAttributes : void 0 : void 0) {
            obj.required = ((ref7 = member.attributes.typeAttributes) != null ? ref7[0] : void 0) === 'required';
          }
          if ((ref8 = member.content) != null ? (ref9 = ref8.value) != null ? (ref10 = ref9.attributes) != null ? ref10["default"] : void 0 : void 0 : void 0) {
            obj["default"] = member.content.value.attributes["default"];
          }
          if (obj.type === 'enum' && (member != null ? (ref11 = member.content) != null ? (ref12 = ref11.value) != null ? (ref13 = ref12.attributes) != null ? (ref14 = ref13["default"]) != null ? (ref15 = ref14[0]) != null ? ref15.content : void 0 : void 0 : void 0 : void 0 : void 0 : void 0)) {
            obj["default"] = member.content.value.attributes["default"][0].content;
          }
          if (member != null ? (ref16 = member.content) != null ? (ref17 = ref16.value) != null ? ref17.content : void 0 : void 0 : void 0) {
            obj.example = member.content.value.content;
          }
          if (obj.type === 'enum' && (member != null ? (ref18 = member.content) != null ? (ref19 = ref18.value) != null ? (ref20 = ref19.attributes) != null ? (ref21 = ref20.samples) != null ? (ref22 = ref21[0]) != null ? (ref23 = ref22[0]) != null ? ref23.content : void 0 : void 0 : void 0 : void 0 : void 0 : void 0 : void 0)) {
            obj.example = member.content.value.attributes.samples[0][0].content;
          }
          if (obj.type === 'enum') {
            if (member != null ? (ref24 = member.content) != null ? (ref25 = ref24.value) != null ? ref25.content : void 0 : void 0 : void 0) {
              ref28 = member != null ? (ref26 = member.content) != null ? (ref27 = ref26.value) != null ? ref27.content : void 0 : void 0 : void 0;
              for (j = 0, len = ref28.length; j < len; j++) {
                value = ref28[j];
                obj.values.push(value.content);
              }
            }
          }
          if (obj.type === 'array') {
            obj.type = (member != null ? (ref29 = member.content) != null ? (ref30 = ref29.value) != null ? (ref31 = ref30.content) != null ? (ref32 = ref31[0]) != null ? ref32.element : void 0 : void 0 : void 0 : void 0 : void 0) + " (Array)";
          }
          if (obj.type === 'enum') {
            obj.type = member != null ? (ref33 = member.content) != null ? (ref34 = ref33.value) != null ? (ref35 = ref34.content) != null ? (ref36 = ref35[0]) != null ? ref36.element : void 0 : void 0 : void 0 : void 0 : void 0;
          }
          collection.push(obj);
        }
      }
      return collection;
    } else {
      ref = dataStructures[root.element];
      if (ref) {
        return renderAttributes(inherit(ref, root), dataStructures);
      }
    }
  };

}).call(this);
