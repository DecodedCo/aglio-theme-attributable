// Generated by CoffeeScript 1.10.0
(function() {
  var ROOT, cache, compileTemplate, crypto, decorate, decorateAction, decorateExample, decorateParameters, decoratePayload, decoratePayloadItem, decorateResource, decorateResourceGroup, decorateResourceGroups, errMsg, exports, fs, getCached, getCss, getTemplate, highlight, hljs, jade, less, markdownIt, modifyUriTemplate, moment, path, querystring, sha1, slug, slugify;

  markdownIt = require('markdown-it');

  hljs = require('highlight.js');

  jade = require('jade');

  less = require('less');

  moment = require('moment');

  path = require('path');

  querystring = require('querystring');

  crypto = require('crypto');

  fs = require('fs');

  ROOT = path.dirname(__filename);

  cache = {};

  exports = {};

  slugify = null;

  errMsg = function(message, err) {
    err.message = message + ": " + err.message;
    return err;
  };

  sha1 = function(value) {
    return crypto.createHash('sha1').update(value.toString()).digest('hex');
  };

  highlight = function(code, lang, subset) {
    return (function() {
      switch (lang) {
        case 'no-highlight':
          return code;
        case null:
          return hljs.highlightAuto(code, subset).value;
        case '':
          return hljs.highlightAuto(code, subset).value;
        default:
          return hljs.highlight(lang, code).value;
      }
    })().trim();
  };

  slug = function(cache, value, unique) {
    var sluggified;
    if (cache === null) {
      cache = {};
    }
    if (value === null) {
      value = '';
    }
    if (unique === null) {
      unique = false;
    }
    sluggified = value.toLowerCase().replace(/[ \t\n\\<>"'=:\/]/g, '-').replace(/-+/g, '-').replace(/^-/, '');
    if (unique) {
      while (cache[sluggified]) {
        sluggified = sluggified.match(/\d+$/) ? sluggified.replace(/\d+$/, function(value) {
          return parseInt(value) + 1;
        }) : sluggified + '-1';
      }
    }
    cache[sluggified] = true;
    return sluggified;
  };

  getCached = function(key, compiledPath, sources, load, done) {
    var _error, compiledStats, error, error1, i, len, source, sourceStats;
    if (process.env.NOCACHE) {
      return done(null);
    }
    if (cache[key]) {
      return done(null, cache[key]);
    }
    try {
      if (fs.existsSync(compiledPath)) {
        compiledStats = fs.statSync(compiledPath);
        for (i = 0, len = sources.length; i < len; i++) {
          source = sources[i];
          sourceStats = fs.statSync(source);
          if (sourceStats.mtime > compiledStats.mtime) {
            done(null);
          }
        }
        try {
          return load(compiledPath, function(err, item) {
            if (err) {
              done(errMsg('Error loading cached resource', err));
            }
            cache[key] = item;
            return done(null, cache[key]);
          });
        } catch (error) {
          _error = error;
          return done(errMsg('Error loading cached resource', _error));
        }
      } else {
        return done(null);
      }
    } catch (error1) {
      _error = error1;
      return done(_error);
    }
  };

  getCss = function(variables, styles, verbose, done) {
    var compiledPath, customPath, defaultVariablePath, i, j, key, len, len1, load, sources, style, stylePaths, variable, variablePaths;
    key = "css-" + variables + "-" + styles;
    if (cache[key]) {
      return done(null, cache[key]);
    }
    compiledPath = path.join(ROOT, 'cache', (sha1(key)) + ".css");
    defaultVariablePath = path.join(ROOT, 'styles', 'variables-default.less');
    variablePaths = [defaultVariablePath];
    sources = [defaultVariablePath];
    if (!Array.isArray(variables)) {
      variables = [variables];
    }
    if (!Array.isArray(styles)) {
      styles = [styles];
    }
    for (i = 0, len = variables.length; i < len; i++) {
      variable = variables[i];
      if (variable !== 'default') {
        customPath = path.join(ROOT, 'styles', "variables-" + variable + ".less");
        if (!fs.existsSync(customPath) && !fs.existsSync(variable)) {
          done(new Error(variable + " does not exist!"));
        }
        variablePaths.push(customPath);
        sources.push(customPath);
      }
    }
    stylePaths = [];
    for (j = 0, len1 = styles.length; j < len1; j++) {
      style = styles[j];
      debugger;
      customPath = path.join(ROOT, 'styles', "layout-" + style + ".less");
      if (!fs.existsSync(customPath) && !fs.existsSync(style)) {
        done(new Error(style + " does not exist!"));
      }
      stylePaths.push(customPath);
      sources.push(customPath);
    }
    load = function(filename, loadDone) {
      return fs.readFile(filename, 'utf-8', loadDone);
    };
    if (verbose) {
      console.log("Using variables " + variablePaths);
      console.log("Using styles " + stylePaths);
      console.log("Checking cache " + compiledPath);
    }
    return getCached(key, compiledPath, sources, load, function(err, css) {
      var k, l, len2, len3, lessErrorHandler, tmp;
      if (err) {
        return done(err);
      }
      if (css) {
        return done(null, css);
      }
      if (verbose) {
        console.log('Not cached or out of date. Generating CSS...');
      }
      tmp = '';
      for (k = 0, len2 = variablePaths.length; k < len2; k++) {
        customPath = variablePaths[k];
        tmp += "@import \"" + customPath + "\";\n";
      }
      for (l = 0, len3 = stylePaths.length; l < len3; l++) {
        customPath = stylePaths[l];
        tmp += "@import \"" + customPath + "\";\n";
      }
      lessErrorHandler = function(err, result) {
        var _error, error;
        if (err) {
          return done(msgErr('Error processing LESS -> CSS', err));
        }
        try {
          css = result.css;
          fs.writeFileSync(compiledPath, css, 'utf-8');
        } catch (error) {
          _error = error;
          return done(errMsg('Error writing cached CSS to file', _error));
        }
        cache[key] = css;
        return done(null, cache[key]);
      };
      return less.render(tmp, {
        compress: true
      }, lessErrorHandler);
    });
  };

  compileTemplate = function(filename, options) {
    return "var jade = require('jade/runtime');\n" + (jade.compileFileClient(filename, options)) + "\nmodule.exports = compiledFunc;";
  };

  getTemplate = function(name, verbose, done) {
    var compiledPath, key, load;
    key = "template-" + name;
    if (cache[key]) {
      return done(null, cache[key]);
    }
    compiledPath = path.join(ROOT, 'cache', (sha1(key)) + ".js");
    load = function(filename, loadDone) {
      var _error, error, loaded;
      try {
        loaded = require(filename);
      } catch (error) {
        _error = error;
        loadDone(errMsg('Unable to load template', _error));
      }
      return loadDone(null, require(filename));
    };
    if (verbose) {
      console.log("Using template " + name);
      console.log("Checking cache " + compiledPath);
    }
    return getCached(key, compiledPath, [name], load, function(err, template) {
      var _error, compileOptions, compiled, error, error1, error2;
      if (err) {
        return done(err);
      }
      if (template) {
        if (verbose) {
          console.log('Cached version loaded');
        }
        done(null, template);
      }
      if (verbose) {
        console.log('Not cached or out of date. Generating template JS...');
      }
      compileOptions = {
        filename: name,
        name: 'compiledFunc',
        self: true,
        compileDebug: false
      };
      try {
        compiled = compileTemplate(name, compileOptions);
      } catch (error) {
        _error = error;
        done(errMsg('Error compiling template', _error));
      }
      if (compiled.indexOf('self.') === -1) {
        compileOptions.self = false;
        try {
          compiled = compileTemplate(name, compileOptions);
        } catch (error1) {
          _error = error1;
          done(errMsg('Error compiling template', _error));
        }
      }
      try {
        fs.writeFileSync(compiledPath, compiled, 'utf-8');
      } catch (error2) {
        _error = error2;
        done(errMsg('Error writing cached template file', _error));
      }
      cache[key] = require(compiledPath);
      return done(null, cache[key]);
    });
  };

  modifyUriTemplate = function(templateUri, parameters) {
    var block, closeIndex, index, lastIndex, parameterBlocks, parameterSet, parameterValidator, reduceUri;
    parameterValidator = function(b) {
      return parameters.indexOf(querystring.unescape(b.replace(/^\*|\*$/, ''))) !== -1;
    };
    parameters = parameters.map(function(param) {
      return param.name;
    });
    parameterBlocks = [];
    lastIndex = 0;
    index = 0;
    while ((index = templateUri.indexOf("{", index)) !== -1) {
      parameterBlocks.push(templateUri.substring(lastIndex, index));
      block = {};
      closeIndex = templateUri.indexOf("}", index);
      block.querySet = templateUri.indexOf("{?", index) === index;
      block.formSet = templateUri.indexOf("{&", index) === index;
      block.reservedSet = templateUri.indexOf("{+", index) === index;
      lastIndex = closeIndex + 1;
      index++;
      if (block.querySet) {
        index++;
      }
      parameterSet = templateUri.substring(index, closeIndex);
      block.parameters = parameterSet.split(",").filter(parameterValidator);
      if (block.parameters.length) {
        parameterBlocks.push(block);
      }
    }
    parameterBlocks.push(templateUri.substring(lastIndex, templateUri.length));
    reduceUri = function(uri, v) {
      var segment;
      if (typeof v === "string") {
        uri.push(v);
      } else {
        segment = ["{"];
        if (v.querySet) {
          segment.push("?");
        }
        if (v.formSet) {
          segment.push("&");
        }
        if (v.reservedSet) {
          segment.push("+");
        }
        segment.push(v.parameters.join());
        segment.push("}");
        uri.push(segment.join(""));
      }
      return uri;
    };
    return parameterBlocks.reduce(reduceUri, []).join('').replace(/\/+/g, '/').replace(/\/$/, '');
  };

  decoratePayloadItem = function(item) {
    var _error, error, results;
    results = [];
    item.hasContent = item.description || Object.keys(item.headers).length || item.body || item.schema;
    try {
      if (item.body) {
        item.body = JSON.stringify(JSON.parse(item.body), null, 2);
      }
      if (item.schema) {
        results.push(item.schema = JSON.stringify(JSON.parse(item.schema), null, 2));
      } else {
        results.push(null);
      }
    } catch (error) {
      _error = error;
      results.push(false);
    }
    return results;
  };

  decoratePayload = function(payload, example) {
    var i, item, len, payloadItems, results;
    payloadItems = example[payload] || [];
    results = [];
    for (i = 0, len = payloadItems.length; i < len; i++) {
      item = payloadItems[i];
      results.push(decoratePayloadItem(item));
    }
    return results;
  };

  decorateExample = function(example) {
    var i, len, payload, payloads, results;
    payloads = ['requests', 'responses'];
    results = [];
    for (i = 0, len = payloads.length; i < len; i++) {
      payload = payloads[i];
      results.push(decoratePayload(payload, example));
    }
    return results;
  };

  decorateParameters = function(parameters) {
    var i, knownParameters, len, parameter, results;
    results = [];
    knownParameters = {};
    for (i = 0, len = parameters.length; i < len; i++) {
      parameter = parameters[i];
      if (knownParameters[parameter.name]) {
        continue;
      }
      knownParameters[parameter.name] = true;
      results.push(parameter);
    }
    return results.reverse();
  };

  decorateAction = function(action, resource, resourceGroup) {
    var example, i, len, ref1, results, reversedParams;
    results = [];
    action.elementId = slugify(resourceGroup.name + "-" + resource.name + "-" + action.method, true);
    action.elementLink = "#" + action.elementId;
    action.methodLower = action.method.toLowerCase();
    action.parameters = !action.parameters || !action.parameters.length ? resource.parameters : resource.parameters ? resource.parameters.concat(action.parameters) : void 0;
    reversedParams = (action.parameters || []).concat([]).reverse();
    action.parameters = decorateParameters(reversedParams);
    action.uriTemplate = modifyUriTemplate((action.attributes || {}).uriTemplate || resource.uriTemplate || '', action.parameters);
    ref1 = action.examples;
    for (i = 0, len = ref1.length; i < len; i++) {
      example = ref1[i];
      results.push(decorateExample(example));
    }
    return results;
  };

  decorateResource = function(resource, resourceGroup) {
    var action, actions, i, len, results;
    resource.elementId = slugify(resourceGroup.name + "-" + resource.name, true);
    resource.elementLink = "#" + resource.elementId;
    actions = resource.actions || [];
    results = [];
    for (i = 0, len = actions.length; i < len; i++) {
      action = actions[i];
      results.push(decorateAction(action, resource, resourceGroup));
    }
    return results;
  };

  decorateResourceGroup = function(resourceGroup) {
    var i, len, resource, resources, results;
    resources = resourceGroup.resources || [];
    results = [];
    for (i = 0, len = resources.length; i < len; i++) {
      resource = resources[i];
      results.push(decorateResource(resource, resourceGroup));
    }
    return results;
  };

  decorateResourceGroups = function(resourceGroups) {
    var i, len, resourceGroup, results;
    results = [];
    for (i = 0, len = resourceGroups.length; i < len; i++) {
      resourceGroup = resourceGroups[i];
      results.push(decorateResourceGroup(resourceGroup));
    }
    return results;
  };

  decorate = function(api, md, slugCache) {
    var results;
    slugify = slug.bind(slug, slugCache);
    results = [];
    if (api.description) {
      api.descriptionHtml = md.render(api.description);
      api.navItems = slugCache._nav;
      slugCache._nav = [];
    }
    results.push(decorateResourceGroups(api.resourceGroups || []));
    return results;
  };

  exports.getConfig = function() {
    return {
      formats: ['1A'],
      options: [
        {
          name: 'variables',
          description: 'Color scheme name or path to custom variables',
          "default": 'default'
        }, {
          name: 'condense-nav',
          description: 'Condense navigation links',
          boolean: true,
          "default": true
        }, {
          name: 'full-width',
          description: 'Use full window width',
          boolean: true,
          "default": false
        }, {
          name: 'template',
          description: 'Template name or path to custom template',
          "default": 'default'
        }, {
          name: 'style',
          description: 'Layout style name or path to custom stylesheet'
        }
      ]
    };
  };

  exports.render = function(input, options, done) {
    var md, slugCache, themeStyle, themeVariables, verbose;
    if (done == null) {
      done = options;
      options = {};
    }
    if (process.env.NOCACHE != null) {
      cache = {};
    }
    if (options.condenseNav != null) {
      options.themeCondenseNav = options.condenseNav;
    }
    if (options.fullWidth != null) {
      options.themeFullWidth = options.fullWidth;
    }
    if (options.themeVariables == null) {
      options.themeVariables = 'default';
    }
    if (options.themeStyle == null) {
      options.themeStyle = 'default';
    }
    if (options.themeTemplate == null) {
      options.themeTemplate = 'default';
    }
    if (options.themeCondenseNav == null) {
      options.themeCondenseNav = true;
    }
    if (options.themeFullWidth == null) {
      options.themeFullWidth = false;
    }
    if (options.themeTemplate === 'default') {
      options.themeTemplate = path.join(ROOT, 'templates', 'index.jade');
    }
    debugger;
    slugCache = {
      _nav: []
    };
    md = markdownIt({
      html: true,
      linkify: true,
      typographer: true,
      highlight: highlight
    });
    md.use(require('markdown-it-checkbox')).use(require('markdown-it-container'), 'note').use(require('markdown-it-container'), 'warning').use(require('markdown-it-emoji')).use(require('markdown-it-anchor'), {
      slugify: function(value) {
        var output;
        output = "header-" + (slug(slugCache, value, true));
        slugCache._nav.push([value, "#" + output]);
        return output;
      },
      permalink: true,
      permalinkClass: 'permalink'
    });
    md.renderer.rules.code_clock = md.renderer.rules.fence;
    decorate(input, md, slugCache);
    themeVariables = options.themeVariables;
    themeStyle = options.themeStyle;
    verbose = options.verbose;
    return getCss(themeVariables, themeStyle, verbose, function(err, css) {
      var i, key, len, locals, ref, value;
      if (err) {
        return done(errMsg('Could not get CSS', err));
      }
      locals = {
        api: input,
        condenseNav: options.themeCondenseNav,
        css: css,
        fullWidth: options.themeFullWidth,
        date: moment,
        hash: function(value) {
          return crypto.createHash('md5').update(value.toString()).digest('hex');
        },
        highlight: highlight,
        markdown: function(content) {
          return md.render(content);
        },
        slug: slug.bind(slug, slugCache),
        urldec: function(value) {
          return querystring.unescape(value);
        }
      };
      ref = options.locals || {};
      for (i = 0, len = ref.length; i < len; i++) {
        key = ref[i];
        value = ref[key];
        locals[key] = value;
      }
      return getTemplate(options.themeTemplate, verbose, function(getTemplateErr, renderer) {
        var _error, error, html;
        if (getTemplateErr) {
          return done(errMsg('Could not get template', getTemplateErr));
        }
        try {
          html = renderer(locals);
        } catch (error) {
          _error = error;
          done(errMsg('Error calling template during rendering', _error));
        }
        return done(null, html);
      });
    });
  };

  module.exports = exports;

}).call(this);
